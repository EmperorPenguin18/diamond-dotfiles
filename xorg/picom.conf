#Shadows
shadow = false;

#Fading
fading = false;

#Opacity
frame-opacity = 0.9;
inactive-opacity-override = false;

#Blurring
blur:
{
  method = "dual_kawase";
  strength = 8;
}
wintypes:
{
  normal = { blur-background = true; };
  splash = { blur-background = false; };
}

#General Settings
daemon = false;
backend = "glx";
vsync = false;
refresh-rate = 0;
detect-client-opacity = true;
unredir-if-possible = true;
unredir-if-possible-delay = 0
dbus = false;
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-transient = true;
detect-client-leader = true;

# Resize damaged region by a specific number of pixels.
# A positive value enlarges it while a negative one shrinks it.
# If the value is positive, those additional pixels will not be actually painted
# to screen, only used in blur calculation, and such. (Due to technical limitations,
# with use-damage, those pixels will still be incorrectly painted to screen.)
# Primarily used to fix the line corruption issues of blur,
# in which case you should use the blur radius value here
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
# with a 5x5 one you use `--resize-damage 2`, and so on).
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1

glx-no-stencil = true #Could break things
glx-no-rebind-pixmap = true #Could break things

# Disable the use of damage information.
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
use-damage = true;

xrender-sync-fence = true
no-ewmh-fullscreen = false
max-brightness = 1.0

# Make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

log-level = "warn";
show-all-xerrors = true
